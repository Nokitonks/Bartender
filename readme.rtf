{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Modules needed: pygame, opencv, numpy\
\
To start the game, simply run the MainGame.py file.  \
\
You need to change the path in the MainGame.py file for the gesture pictures and the images\
In addition, you need to change the image path in the MainSprites.py file.\
\
That should be it!\
\
This openCV code is based on taking a frame from the camera and turning it into a numpy array of pixel values. These pixel values are then blurred and thresholded in order to get a black and white area of interest. In this case, my hand. From there a function in openCV compares the shapes of the numpy arrays (contours). A directory of hand pictures is used to compare the frame and the best match is determined. This is passed to the actual pygame which then uses the input in the game. Algorithmically, the pygame code isn\'92t too complex but simply has a lot of moving parts. Thank you!}